type token =
  | LP
  | RP
  | EOL
  | IFF
  | COMMA
  | CUT
  | EOF
  | PLUS
  | MINUS
  | MULTIPLY
  | DIVIDE
  | POWER
  | EQUAL
  | GRT
  | LES
  | GRTEQ
  | LESEQ
  | FAIL
  | VAR of (string)
  | ID of (string)
  | INT of (int)
  | BOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Ast
# 30 "parser.ml"
let yytransl_const = [|
  257 (* LP *);
  258 (* RP *);
  259 (* EOL *);
  260 (* IFF *);
  261 (* COMMA *);
  262 (* CUT *);
    0 (* EOF *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* MULTIPLY *);
  266 (* DIVIDE *);
  267 (* POWER *);
  268 (* EQUAL *);
  269 (* GRT *);
  270 (* LES *);
  271 (* GRTEQ *);
  272 (* LESEQ *);
  273 (* FAIL *);
    0|]

let yytransl_block = [|
  274 (* VAR *);
  275 (* ID *);
  276 (* INT *);
  277 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\004\000\001\000\003\000\001\000\001\000\
\001\000\004\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\008\000\002\000\009\000\007\000\000\000\
\013\000\000\000\000\000\000\000\000\000\001\000\003\000\000\000\
\006\000\000\000\000\000\000\000\000\000\010\000\004\000\012\000"

let yydgoto = "\002\000\
\009\000\010\000\018\000\019\000"

let yysindex = "\002\000\
\001\000\000\000\255\254\000\000\000\000\000\000\000\000\020\255\
\000\000\001\000\011\255\010\255\255\254\000\000\000\000\255\254\
\000\000\018\255\022\255\019\255\255\254\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\255\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\015\000\000\000\003\000\242\255"

let yytablesize = 276
let yytable = "\003\000\
\005\000\020\000\001\000\011\000\004\000\012\000\024\000\005\000\
\005\000\005\000\005\000\017\000\011\000\015\000\016\000\006\000\
\007\000\008\000\011\000\011\000\013\000\023\000\021\000\022\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\007\000\008\000"

let yycheck = "\001\001\
\000\000\016\000\001\000\001\000\006\001\003\000\021\000\002\001\
\003\001\004\001\005\001\002\001\010\000\003\001\004\001\017\001\
\018\001\019\001\002\001\003\001\001\001\003\001\005\001\002\001\
\010\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001"

let yynames_const = "\
  LP\000\
  RP\000\
  EOL\000\
  IFF\000\
  COMMA\000\
  CUT\000\
  EOF\000\
  PLUS\000\
  MINUS\000\
  MULTIPLY\000\
  DIVIDE\000\
  POWER\000\
  EQUAL\000\
  GRT\000\
  LES\000\
  GRTEQ\000\
  LESEQ\000\
  FAIL\000\
  "

let yynames_block = "\
  VAR\000\
  ID\000\
  INT\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.clause) in
    Obj.repr(
# 18 "parser.mly"
                (_1							)
# 199 "parser.ml"
               : Ast.clause))
; (fun __caml_parser_env ->
    Obj.repr(
# 19 "parser.mly"
                (Fact(N(("File_end",0),[]))	)
# 205 "parser.ml"
               : Ast.clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 24 "parser.mly"
               (		Fact(_1	)			)
# 212 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termlist) in
    Obj.repr(
# 25 "parser.mly"
                         (		Rule(_1,_3)			)
# 220 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 29 "parser.mly"
          ( N((_1,0),[]) 				)
# 227 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 30 "parser.mly"
                ( _2						)
# 234 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
            ( Var(_1) 					)
# 241 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
           ( CUT						)
# 247 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
            ( FAIL						)
# 253 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termlist) in
    Obj.repr(
# 34 "parser.mly"
                      ( N((_1,List.length (_3)),_3))
# 261 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 38 "parser.mly"
           ( [_1]						)
# 268 "parser.ml"
               : 'termlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'termlist) in
    Obj.repr(
# 39 "parser.mly"
                       ( _1::_3					)
# 276 "parser.ml"
               : 'termlist))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.clause)
